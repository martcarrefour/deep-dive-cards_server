generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum AuthProvider {
  GOOGLE
  YANDEX
}

enum UserAnswer {
  KNOW
  DONT_KNOW
  NOT_SURE
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  username  String?       @unique
  password  String?
  provider  AuthProvider?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  roles     UserRole[]
  tokens    Token[]
  isBlocked Boolean       @default(false) @map("is_blocked")
  packs     Pack[]
  sessions  Session[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Pack {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  isPublic  Boolean   @default(false) @map("is_public")
  rating    Decimal   @default(0)
  cards     Card[]
  tags      Tag[]
  sessions  Session[]

  @@map("packs")
}

model Tag {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  packs     Pack[]

  @@map("tags")
}

model Card {
  id         Int      @id @default(autoincrement())
  pack       Pack     @relation(fields: [packId], references: [id])
  packId     Int      @map("pack_id")
  question   String
  answer     String
  hint       String?
  difficulty Int      @default(1)
  parents    Card[]   @relation("ChildToParent")
  childrens  Card[]   @relation("ChildToParent")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  results    Result[]

  @@map("cards")
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  pack      Pack     @relation(fields: [packId], references: [id])
  packId    Int      @map("pack_id")
  results   Result[]

  @@map("sessions")
}

model Result {
  id         Int         @id @default(autoincrement())
  sessionId  Int
  session    Session     @relation(fields: [sessionId], references: [id])
  cardId     Int
  card       Card        @relation(fields: [cardId], references: [id])
  userAnswer UserAnswer?
  usedHint   Boolean     @default(false)

  @@map("results")
}
