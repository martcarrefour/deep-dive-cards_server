// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum AuthProvider {
  GOOGLE
  YANDEX
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  username  String?       @unique
  password  String?
  provider  AuthProvider?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  roles     UserRole[]
  token     Token[]
  isBlocked Boolean       @default(false) @map("is_blocked")
  packs     Pack[]
  sessions  Session[]
  // PackScore PackScore[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Pack {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  title     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  isPublic  Boolean   @default(false) @map("is_public")
  rating    Decimal   @default(0)
  cards     Card[]
  tags      Tag[]
  sessions  Session[]
  // PackScore PackScore[]

  @@map("packs")
}

model Tag {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  packs     Pack[]

  @@map("tags")
}

model Card {
  id        Int      @id @default(autoincrement())
  pack      Pack     @relation(fields: [packId], references: [id])
  packId    Int      @map("pack_id")
  question  String
  answer    String
  hint      String?
  level     Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // CardScore CardScore[]

  @@map("cards")
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  pack      Pack     @relation(fields: [packId], references: [id])
  packId    Int      @map("pack_id")
  depth     Int      @default(0)
  // score       PackScore @relation(fields: [packScoreId], references: [id])
  // packScoreId Int      @map("pack_score_id")

  @@map("sessions")
}

// model PackScore {
//   id           Int         @id @default(autoincrement())
//   user         User        @relation(fields: [userId], references: [id])
//   userId       String      @map("user_id")
//   pack         Pack        @relation(fields: [packId], references: [id])
//   cardsScores  CardScore[]
//   sessionId    Int         @map("session_id")
//   currentScore Int         @default(0) @map("current_score")
//   maxScore     Int         @default(10) @map("max_score")
//   packId       Int         @map("pack_id")
//   Session      Session[]

//   @@map("packs_scores")
// }

// model CardScore {
//   id           Int       @id @default(autoincrement())
//   card         Card      @relation(fields: [cardId], references: [id])
//   cardId       Int       @map("card_id")
//   score        PackScore @relation(fields: [scoreId], references: [id])
//   scoreId      Int       @map("score_id")
//   currentScore Int       @default(0) @map("current_score")
//   maxScore     Int       @default(10) @map("max_score")

//   @@map("cards_scores")
// }
